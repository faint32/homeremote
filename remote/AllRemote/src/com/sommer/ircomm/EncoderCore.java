package com.sommer.ircomm;


import java.util.Arrays;


import android.media.AudioFormat;
import android.media.AudioTrack;
import android.util.Log;



public class EncoderCore{

	private final static String TAG = "EncoderCore";
	
	private final static int SampleRate = 44100;
	private final static int MINTIME = 10000/441;
	

	
	private final static int rmtBuffSize = AudioTrack.getMinBufferSize(SampleRate, AudioFormat.CHANNEL_OUT_STEREO, AudioFormat.ENCODING_PCM_8BIT);

//	private final int pwBuffSize = PowerSupply.pwMinBufferSize;
	
	private static  int encoderBufferSize;
	private  static byte[] SignalData = {-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67
		,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67
		,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67
		,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67,-128,-128,-74,74,29,-29,-4,4,2,-2,-26,26,67,-67
	};
	public static int getRmtBuffSize(){
		return rmtBuffSize;
	}

//	public int getPowerBuffSize(){
//		return pwBuffSize;   
//	}

	public  static int getMsgSamplerate(){
		return SampleRate;
	}
	
	public  static int getPowerSupplySamplerate(){
		return SampleRate;
	}
	
//	public native static int getEncoderBufferSize();
	public static int getEncoderBufferSize(){
		return encoderBufferSize;
		
	}
	
	/**
	 * @param rmtData
	 * @param keyvalue
	 * @return
	 */
	public static byte[] getRemoteFrameData( String keyvalue) {
		// TODO Auto-generated method stub
		int i;
		
		byte[] data = null ;
		
	
		
		
		return data;
		}
	
	public static int waveLength(int time){
		int length = time*441/5000;
		int odd = length%14;
	//	Log.v(TAG, "length before============>" + length);
		if (odd==0){
			return length;
		}else {
		length += 14-odd;	
		}
	//	Log.v(TAG, "length after============>" + length);
		return length;
	}
	
	public static int singleLength(int time){
		int length = time*441/5000;
		return length;
		
	}
	
	
	public static byte[] getDTVWuXiFrameData(byte[] sendBit) {
		int point=0;
		int i;
		byte[] data = new byte[rmtBuffSize*2];
		Arrays.fill(data, (byte) -128);
		byte[] singleFrame ;
	//	String remotecode = "1010101001010101101010100101010110101010";
	//	sendBit =remotecode.getBytes();
		//head start
		singleFrame=dataSenderLevel(waveLength(3600));  // high level out
		System.arraycopy(singleFrame, 0, data, point, singleFrame.length);
		point += singleFrame.length;
		
		point += singleLength(1800);					// low level out
		
		for (i=0;i<24;i++){
			Log.v(TAG, "remotebit [" + i + "] ============>" + sendBit[i]);
			if (sendBit[i]=='1'){
				singleFrame=dataSenderLevel(waveLength(500));  // high level out
				System.arraycopy(singleFrame, 0, data, point, singleFrame.length);
				point += singleFrame.length;
				
				point += singleLength(1000);
			}
			else {
				singleFrame=dataSenderLevel(waveLength(500));  // high level out
				System.arraycopy(singleFrame, 0, data, point, singleFrame.length);
				point += singleFrame.length;
				
				point += singleLength(500);
			}
		}
		
		singleFrame=dataSenderLevel(waveLength(3600));  // high level out
		System.arraycopy(singleFrame, 0, data, point, singleFrame.length);
		point += singleFrame.length;
		
		point += singleLength(1800);					// low level out
		
		for (i=24;i<40;i++){
			Log.v(TAG, "remotebit [" + i + "] ============>" + sendBit[i]);
			if (sendBit[i]=='1'){
				singleFrame=dataSenderLevel(waveLength(500));  // high level out
				System.arraycopy(singleFrame, 0, data, point, singleFrame.length);
				point += singleFrame.length;
				
				point += singleLength(1000);
			}
			else {
				singleFrame=dataSenderLevel(waveLength(500));  // high level out
				System.arraycopy(singleFrame, 0, data, point, singleFrame.length);
				point += singleFrame.length;
				
				point += singleLength(500);
			}
			
		}
		singleFrame=dataSenderLevel(waveLength(500));  // high level out
		System.arraycopy(singleFrame, 0, data, point, singleFrame.length);
		point += singleFrame.length;
		
		point += singleLength(6000);
		Log.v(TAG, "test frame length  ============>" + point);
		return data;
	}
	
	public static byte[] getNEC6122FrameData(byte[] sendBit) {
		int point=0;
		int i;
		byte[] data = new byte[rmtBuffSize*2];
		Arrays.fill(data, (byte) -128);
		byte[] singleFrame ;
	//	String remotecode = "1010101001010101101010100101010110101010";
	//	sendBit =remotecode.getBytes();
		//head start
		singleFrame=dataSenderLevel(waveLength(9000));  // high level out
		System.arraycopy(singleFrame, 0, data, point, singleFrame.length);
		point += singleFrame.length;
		
		point += singleLength(4500);					// low level out
		
		for (i=0;i<32;i++){
			Log.v(TAG, "remotebit [" + i + "] ============>" + sendBit[i]);
			if (sendBit[i]=='1'){
				singleFrame=dataSenderLevel(waveLength(560));  // high level out
				System.arraycopy(singleFrame, 0, data, point, singleFrame.length);
				point += singleFrame.length;
				
				point += singleLength(1325);
			}
			else {
				singleFrame=dataSenderLevel(waveLength(560));  // high level out
				System.arraycopy(singleFrame, 0, data, point, singleFrame.length);
				point += singleFrame.length;
				
				point += singleLength(500);
			}
		}
		
		
		singleFrame=dataSenderLevel(waveLength(500));  // high level out
		System.arraycopy(singleFrame, 0, data, point, singleFrame.length);
		point += singleFrame.length;
		
		point += singleLength(6000);
		singleFrame=dataSenderLevel(waveLength(500));  // high level out
		System.arraycopy(singleFrame, 0, data, point, singleFrame.length);
		point += singleFrame.length;
		Log.v(TAG, "test frame length  ============>" + point);
		return data;
	}
	
	

	private static byte[] dataSenderLevel(int time){
		
		if (time <1)
			return null;
		byte[] data = new byte[time];
		
		
		System.arraycopy(SignalData, 0, data, 0, time);
		
		return data;
	}
}
	
